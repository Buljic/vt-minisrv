# .github/workflows/perf-guard.yml
name: perf-guard
on: [push]

jobs:
  latency:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    # Test will run with both VT enabled and disabled
    strategy:
      matrix:
        vt: [true, false]

    defaults:
      run:
        working-directory: minisrv

    steps:
      # 1) Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2) Install Temurin JDK 24
      - name: Setup JDK 24
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '24'

      # 3) Build the project without running tests
      - name: Build with Maven
        run: mvn -q package -DskipTests

      # 4) Start the server in the background (VT on/off controlled by matrix)
      - name: Start server
        run: |
          java -Dvt=${{ matrix.vt }} -jar target/*jar &
          echo $! > pid.txt
          sleep 6

      # 5) Install ApacheBench for load testing
      - name: Install ApacheBench
        working-directory: ${{ github.workspace }}
        run: |
          sudo apt-get update
          sudo apt-get install -y apache2-utils

      # 6) Run the load test and extract p95 latency
      - name: Run load test
        run: |
          ab -n 3000 -c 200 http://127.0.0.1:8080/io > ab.out
          LAT=$(grep "95%" ab.out | awk '{printf("%.0f",$2)}')
          echo "p95 latency = $LAT ms"
          if [ "$LAT" -gt 150 ]; then
            echo "::error::p95 latency too high ($LAT ms) (vt=${{ matrix.vt }})"
            exit 1
          fi

      # 7) Upload ab.out as CI artifact
      - name: Upload ab report
        uses: actions/upload-artifact@v4
        with:
          name: ab-report-vt-${{ matrix.vt }}
          path: minisrv/ab.out

      # 8) Clean shutdown of the server
      - name: Stop server
        run: kill $(cat pid.txt)

      # 9) Add summary output to GitHub Actions log
      - name: Tag variant in summary
        run: echo "perf-guard vt=${{ matrix.vt }} passed" >> $GITHUB_STEP_SUMMARY
